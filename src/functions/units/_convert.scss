//     _________  ____ _____________________
//    / ___/ __ \/ __ `/ ___/ ___/ ___/ ___/
//   / /  / /_/ / /_/ / /  / /__(__  |__  )
//  /_/   \____/\__,_/_(_) \___/____/____/
//
// +==============================================================================
// | UNIT CONVERSION
// +==============================================================================
//




// ------------------------------------------------------------------------------
// !-- STRIP UNIT
// ------------------------------------------------------------------------------
// It strips the unit of measure and returns it
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

// ------------------------------------------------------------------------------
// !-- CONVERT TO REM
// ------------------------------------------------------------------------------
@function convert-to-rem($value, $base-value: $rem-base) {
	@if $value == auto {
		$value: auto;
	} @else {
		$value: strip-unit($value) / strip-unit($base-value) * 1rem;
		@if $value == 0rem {
			$value: 0;
		}
	}
	@return $value;
}

// ------------------------------------------------------------------------------
// !-- CONVERT TO PX
// ------------------------------------------------------------------------------
@function convert-to-px($value, $base-value: $rem-base) {
	@if $value == auto {
		$value: auto;
	} @else {
		$value: strip-unit($value) * strip-unit($base-value) * 1px;
		@if $value == 0px {
			$value: 0;
		}
	}
	@return $value;
}

// ------------------------------------------------------------------------------
// !-- REM CALC
// ------------------------------------------------------------------------------
// Allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//   rem-calc((16px, 32px, 48), 8px);

@function rem-calc($values, $base-value: $rem-base) {
	$max: length($values);
	@if $max == 1 {
		@return convert-to-rem(nth($values, 1));
	}
	$rem-values: ();
	@for $i from 1 through $max {
		$rem-values: append($rem-values, convert-to-rem(nth($values, $i)));
	}
	@return $rem-values;
}

// ------------------------------------------------------------------------------
// !-- REM STAY
// ------------------------------------------------------------------------------
@function rem-set($values, $base-value: $rem-base) {
	$max: length($values);
	@if $max == 1 {
		@return strip-unit(nth($values, 1)) * 1rem;
	}
	$rem-values: ();
	@for $i from 1 through $max {
		$rem-values: append($rem-values, strip-unit(nth($values, $i)) * 1rem);
	}
	@return $rem-values;
}

// ------------------------------------------------------------------------------
// !-- PIXEL CALC
// ------------------------------------------------------------------------------
@function px-calc($values) {
	$max: length($values);
	@if $max == 1 {
		@return convert-to-px(nth($values, 1));
	}
	$px-values: ();
	@for $i from 1 through $max {
		$px-values: append($px-values, convert-to-px(nth($values, 1)));
	}
	@return $px-values;
}

// ------------------------------------------------------------------------------
// !-- PIXEL STAY
// ------------------------------------------------------------------------------
@function px-set($values) {
	$max: length($values);
	@if $max == 1 {
		@return strip-unit(nth($values, 1)) * 1px;
	}
	$px-values: ();
	@for $i from 1 through $max {
		$px-values: append($px-values, strip-unit(nth($values, $i)) * 1px);
	}
	@return $px-values;
}

// ------------------------------------------------------------------------------
// !-- PERCENTAGE
// ------------------------------------------------------------------------------
@function percent-calc($numerator, $denominator) {
	@return percentage($numerator / $denominator);
}


/// Convert to VW units
//  +==============================================================================-
@function get-vw($target) {
	$vw-context: (1000*.01) * 1px;
	@return ($target/$vw-context) * 1vw;
}



// Functions:
// ----------------------------------------------------------
//
//  NUMBER:
//
//  isNaN($value)  - returns true or false if type-of($value)==number
//
//  number($value) - returns a unitless number.
//
//  int($value)    - returns a unitless integer.
//
//  uint($value)   - returns a unitless unsigned integer.
//
//  UNITS:
//
//  px($value)     - converts a number or unit to px.
//
//  em($args...)   - converts a number or unit to em.
//
//                    To adjust for em compounds you can add
//                    additional arguments to calculate the
//                    visual em size. em(visual-size,....)
//
//                    Example:  em(2, 2em, 2em) => 0.5em
//
//  rem($value)    - converts a number or unit to rem.
//
//  pt($value)     - converts a number or unit to pt.
//
//  pc($value)     - converts a number or unit to pc.
//
//  in($value)     - converts a number or unit to in.
//
//  cm($value)     - converts a number or unit to cm.
//
//
// PERCENTAGE:
//
//  pct($value,$base:100)   - similar to percentage, but takes a base
//                            value (100%) to be used for calculating
//                            the percent value returned
//
//                            Example:  pct(1,100)     => 1%
//                                      pct(1,1)       => 100%
//                                      pct(50,250)    => 20%
//                                      pct(10px,16px) => 62.5%
//                                      pct(1em,16px)  => 100%
//
// ANGLE:
//
//  deg($value)     - converts a number or angle unit to deg.
//
//  grad($value)    - converts a number or angle unit to grad.
//
//  turn($value)    - converts a number or angle unit to turn.
//
//  rad($value)     - converts a number or angle unit to rad.
//
//
// ==========================================================
// Unit Conversion Table
// http://www.translatorscafe.com/cafe/units-converter/typography/
//      1px = 0.0625pc;
//      1px = 0.75pt;
//      1px = 0.010416667in;
//      1px = 0.264583333mm;
//      1px = 0.026458333cm;
//
// Angles
// http://www.w3.org/TR/css3-values/#angles
//      Full circle = 360deg = 400grad =  1turn = 2πrad
//      1deg =  1.111111111grad  (400/360)
//      1deg =  0.002777778turn  (1/360)
//      1deg =  0.017453293rad   (180/π)
//
// ==========================================================


// Base font size in percent (http://pxtoem.com/)
// - used when calculating em and rem
$base-font-scale: 62.5% !default;

// Number
@function isNaN($val) {
	@return type-of($val)!=number;
}

@function number($val) {
	@return if(isNaN($val), null, if(unitless($val), $val, $val/($val*0+1)));
}

@function int($val) {
	@if (isNaN($val)) {
		@return null;
	}
	$val: number($val);
	@return if($val<0, ceil($val), floor($val));
}

@function uint($val) {
	@return if(isNaN($val), null, abs(int($val)));
}

// Aliases
@function num($val) {
	@return number($val);
}

@function parseFloat($val) {
	@return number($val);
}

// Really a math thing
@function parseInt($val) {
	@return int($val);
}

@function unit-handler($val,$unit){
	@if($val==null or type-of($val)!=number){
		@return null;
	}
	$u:unit($val);
	@if($u==rem or $u==em){
		@return 0px + number($val) / 0.0625 * 100% / $base-font-scale;
	}
	@return $unit + $val;
}

// Absolute lengths
@function px($val) {
	@return unit-handler($val, 0px);
}

@function pt($val) {
	@return unit-handler($val, 0pt);
}

@function pc($val) {
	@return unit-handler($val, 0pc);
}

@function in($val) {
	@return unit-handler($val, 0in);
}

@function mm($val) {
	@return unit-handler($val, 0mm);
}

@function cm($val) {
	@return unit-handler($val, 0cm);
}

// Relative lengths using px as base
@function rem($val) {
	@return 0rem + if(unitless($val), $val, number(px($val)) * 0.0625 * 100% / $base-font-scale);
}

@function em($args...) {
	$val: nth($args, 1);
	$em: 0em  + if(unitless($val), $val, number(px($val)) * 0.0625 * 100% / $base-font-scale);
	@if (length($args)>1) {
		@for $i from 2 through length($args) {
			$em: $em / number(em(nth($args,$i)))
		}
	}
	@return $em;
}

@function pct($val, $base: 1) {
	@return if(isNaN($val), null, percentage(number(px($val))/number(px($base))));
}

// Angle conversion using deg as base
@function deg($val) {
	@if (isNaN($val)) {
		@return null;
	}
	$u: unit($val);
	$u: if($u==deg, 1,
		if($u==grad, 1.111111111,
			if($u==turn, 0.002777778,
				if($u==rad, 0.017453293,
					1))));
	@return number($val) / $u * 1deg;
}

@function grad($val) {
	@return if(isNaN($val), null, if(unitless($val), $val * 1grad, number(deg($val)) * 1.11111111grad));
}

@function turn($val) {
	@return if(isNaN($val), null, if(unitless($val), $val * 1turn, number(deg($val)) * 0.002777778turn));
}

@function rad($val) {
	@return if(isNaN($val), null, if(unitless($val), $val * 1rad, number(deg($val)) * 0.017453293rad));
}

@function convert($unit, $args...) {
	@if ($unit==number) {
		@return number($args...);
	}
	@if ($unit==num) {
		@return num($args...);
	}
	@if ($unit==int) {
		@return int($args...);
	}
	@if ($unit==uint) {
		@return uint($args...);
	}
	@if ($unit==px) {
		@return px($args...);
	}
	@if ($unit==pt) {
		@return pt($args...);
	}
	@if ($unit==pc) {
		@return pc($args...);
	}
	@if ($unit==in) {
		@return in($args...);
	}
	@if ($unit==mm) {
		@return mm($args...);
	}
	@if ($unit==cm) {
		@return cm($args...);
	}
	@if ($unit==em) {
		@return em($args...);
	}
	@if ($unit==rem) {
		@return rem($args...);
	}
	@if ($unit==pct) {
		@return pct($args...);
	}
	@if ($unit==deg) {
		@return int($args...);
	}
	@if ($unit==grad) {
		@return grad($args...);
	}
	@if ($unit==turn) {
		@return turn($args...);
	}
	@if ($unit==rad) {
		@return rad($args...);
	}
}


@function unit-add($number, $unit) {
	@if $unit == 'px' {
		@return $number/// 1px;
	}
	@else if $unit == 'cm' {
		@return $number/// 1cm;
	}
	@else if $unit == 'mm' {
		@return $number/// 1mm;
	}
	@else if $unit == '%' {
		@return $number//1%;
	}
	@else if $unit == 'ch' {
		@return $number/// 1ch;
	}
	@else if $unit == 'pica' {
		@return $number/// 1pica;
	}
	@else if $unit == 'in' {
		@return $number/// 1in;
	}
	@else if $unit == 'em' {
		@return $number/// 1em;
	}
	@else if $unit == 'rem' {
		@return $number/// 1rem;
	}
	@else if $unit == 'pt' {
		@return $number/// 1pt;
	}
	@else if $unit == 'pc' {
		@return $number/// 1pc;
	}
	@else if $unit == 'ex' {
		@return $number/// 1ex;
	}
	@else if $unit == 'vw' {
		@return $number/// 1vw;
	}
	@else if $unit == 'vh' {
		@return $number/// 1vh;
	}
	@else if $unit == 'vmin' {
		@return $number/// 1vmin;
	}
	@else if $unit == 'vmax' {
		@return $number/// 1vmax;
	} @else {
		@return false;
	}
}
