//     _________  ____ _____________________
//    / ___/ __ \/ __ `/ ___/ ___/ ___/ ___/
//   / /  / /_/ / /_/ / /  / /__(__  |__  )
//  /_/   \____/\__,_/_(_) \___/____/____/
//
// pow and sqrt required by ease function
// adapted from https://github.com/at-import/Sassy-math/blob/master/sass/math.scss


@function pow($base, $exponent) {
	$value: $base;

	@if $exponent > 1 {
		@for $i from 2 through $exponent {
			$value: $value * $base;
		}
	}

	@if $exponent < 1 {
		@for $i from 0 through -$exponent {
			$value: $value / $base;
		}
	}

	@return $value;
}

@function sqrt($number) {
	$root: 4;

	@for $i from 1 through 50 {
		$root: $root - (pow($root, 2) - $number) / (2 * $root);
	}

	@return $root;
}

// SASS's elusive Infinity!
@function Infinity() {
	@return 1/0;
}

@function infinity() {
	@return Infinity();
}

@function inf() {
	@return Infinity();
}

@function ∞() {
	@return Infinity();
}

// Borrowed from:

// Ishango v0.1
// Advanced Math in SASS
// Nathan Crank
// http://nathancrank.com/

//////////////////////////////////////////////////
// variable type-of tests
//////////////////////////////////////////////////

// check if value is an integer value
@function is-int($number) {
	@return type-of($number) == number and floor(abs($number)) == abs($number);
}

// check if value is a floating point
@function is-float($value) {
	@return type-of($value) == number and floor(abs($value)) != abs($value);
}

// check if value is SASS's damned Infinity
@function is-inf($value) {
	@return type-of($value) == number and $value == inf();
}

@function remove-unit($value) {
	@if type-of($value) != number {
		@debug "You can only remove units from variables that are numbers. Returning value unchanged.";
		@return $value;
	}
	@if unitless($value) == true {
		@return $value
	}
	$units: unit($value);
	@if $units == "%" {
		@return $value / 1%;
	} @else if $units == "em" {
		@return $value / 1em;
	} @else if $units == "rem" {
		@return $value / 1rem;
	} @else if $units == "px" {
		@return $value / 1px;
	} @else if $units == "in" {
		@return $value / 1in;
	} @else if $units == "cm" {
		@return $value / 1cm;
	} @else if $units == "mm" {
		@return $value / 1mm;
	} @else if $units == "ex" {
		@return $value / 1ex;
	} @else if $units == "pt" {
		@return $value / 1pt;
	} @else if $units == "pc" {
		@return $value / 1pc;
	}
}

//////////////////////////////////////////////////
// constants
//////////////////////////////////////////////////

@function pi() {
	@return 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;
}

@function π() {
	@return pi();
}

@function tau() {
	@return 2 * pi();
}

@function τ() {
	@return tau();
}

@function golden-ratio() {
	@return 1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374;
}

@function φ() {
	@return golden-ratio();
}

// Euler's number
@function e() {
	@return 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274;
}

@function life-the-universe-and-everything() {
	@return 42;
}
